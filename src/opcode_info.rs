#![allow(non_snake_case)]
#![allow(warnings)]

pub struct OpcodeInfo {
    pub opCode: OpMnemonic,
    pub addrMode: AddressMode,
    pub cycles: u8,
    pub xCycles: u8,
    pub bytes: u8,
}

impl OpcodeInfo {
    pub const fn new(opCode: OpMnemonic, addrMode: AddressMode, cycles: u8, xCycles: u8, bytes: u8) -> Self {
        OpcodeInfo {
            opCode,
            addrMode,
            cycles,
            xCycles,
            bytes,
        }
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
#[repr(u8)]
pub enum OpMnemonic {
    ADC = 0,
    AHX,
    ANC,
    AND,
    ALR,
    ARR,
    ASL,
    AXS,
    BCC,
    BCS,
    BEQ,
    BIT,
    BMI,
    BNE,
    BPL,
    BRK,
    BVC,
    BVS,
    CLC,
    CLD,
    CLI,
    CLV,
    CMP,
    CPX,
    CPY,
    DCP,
    DEC,
    DEX,
    DEY,
    EOR,
    INC,
    INX,
    INY,
    ISC,
    JMP,
    JSR,
    KIL,
    LAS,
    LAX,
    LDA,
    LDX,
    LDY,
    LSR,
    NOP,
    ORA,
    PHA,
    PHP,
    PLA,
    PLP,
    RLA,
    ROL,
    ROR,
    RRA,
    RTI,
    RTS,
    SAX,
    SBC,
    SEC,
    SED,
    SEI,
    SHY,
    SHX,
    SLO,
    SRE,
    STA,
    STX,
    STY,
    TAS,
    TAX,
    TAY,
    TSX,
    TXA,
    TXS,
    TYA,
    XAA,
}

pub const OPCODE_INSTRUCTIONS: [OpcodeInfo; 256] = [
    // 0x00
    OpcodeInfo::new(OpMnemonic::BRK, IMP, 7, 0, 1),
    OpcodeInfo::new(OpMnemonic::ORA, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::SLO, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG, 3, 0, 3),
    OpcodeInfo::new(OpMnemonic::ORA, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::ASL, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::SLO, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::PHP, IMP, 3, 0, 1),
    OpcodeInfo::new(OpMnemonic::ORA, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::ASL, ACC, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::ANC, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ORA, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ASL, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::SLO, ABS, 6, 0, 3),

    // 0x10
    OpcodeInfo::new(OpMnemonic::BPL, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::ORA, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::SLO, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG_X, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ORA, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::ASL, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::SLO, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::CLC, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::ORA, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::SLO, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::ORA, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::ASL, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::SLO, ABS_X, 7, 0, 3),

    // 0x20
    OpcodeInfo::new(OpMnemonic::JSR, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::AND, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::RLA, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::BIT, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::AND, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROL, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::RLA, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::PLP, IMP, 4, 0, 1),
    OpcodeInfo::new(OpMnemonic::AND, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROL, ACC, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::ANC, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::BIT, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::AND, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ROL, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::RLA, ABS, 6, 0, 3),

    // 0x30
    OpcodeInfo::new(OpMnemonic::BMI, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::AND, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::RLA, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG_X, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::AND, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROL, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::RLA, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::SEC, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::AND, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::RLA, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::AND, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::ROL, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::RLA, ABS_X, 7, 0, 3),

    // 0x40
    OpcodeInfo::new(OpMnemonic::RTI, IMP, 6, 0, 1),
    OpcodeInfo::new(OpMnemonic::EOR, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::SRE, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG, 3, 0, 3),
    OpcodeInfo::new(OpMnemonic::EOR, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::LSR, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::SRE, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::PHA, IMP, 3, 0, 1),
    OpcodeInfo::new(OpMnemonic::EOR, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::LSR, ACC, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::ALR, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::JMP, ABS, 3, 0, 3),
    OpcodeInfo::new(OpMnemonic::EOR, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::LSR, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::SRE, ABS, 6, 0, 3),

    // 0x50
    OpcodeInfo::new(OpMnemonic::BVC, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::EOR, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::SRE, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG_X, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::EOR, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::LSR, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::SRE, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::CLI, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::EOR, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::SRE, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::EOR, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::LSR, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::SRE, ABS_X, 7, 0, 3),

    // 0x60
    OpcodeInfo::new(OpMnemonic::RTS, IMP, 6, 0, 1),
    OpcodeInfo::new(OpMnemonic::ADC, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::RRA, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG, 3, 0, 3),
    OpcodeInfo::new(OpMnemonic::ADC, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROR, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::RRA, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::PLA, IMP, 4, 0, 1),
    OpcodeInfo::new(OpMnemonic::ADC, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROR, ACC, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::ARR, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::JMP, IND, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::ADC, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ROR, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::RRA, ABS, 6, 0, 3),

    // 0x70
    OpcodeInfo::new(OpMnemonic::BVS, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::ADC, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::RRA, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG_X, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::ADC, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::ROR, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::RRA, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::SEI, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::ADC, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::RRA, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::ADC, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::ROR, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::RRA, ABS_X, 7, 0, 3),

    // 0x80
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::STA, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::SAX, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::STY, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::STA, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::STX, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::SAX, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::DEY, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::TXA, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::XAA, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::STY, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::STA, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::STX, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::SAX, ABS, 4, 0, 3),

    // 0x90
    OpcodeInfo::new(OpMnemonic::BCC, REL, 2, 1, 1),
    OpcodeInfo::new(OpMnemonic::STA, IND_Y, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::AHX, IND_Y, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::STY, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::STA, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::STX, ZPG_Y, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::SAX, ZPG_Y, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::TYA, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::STA, ABS_Y, 5, 0, 3),
    OpcodeInfo::new(OpMnemonic::TXS, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::TAS, ABS_Y, 5, 0, 3),
    OpcodeInfo::new(OpMnemonic::SHY, ABS_X, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::STA, ABS_X, 5, 0, 3),
    OpcodeInfo::new(OpMnemonic::SHX, ABS_Y, 5, 0, 3),
    OpcodeInfo::new(OpMnemonic::AHX, ABS_Y, 5, 0, 3),

    // 0xA0
    OpcodeInfo::new(OpMnemonic::LDY, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDA, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDX, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::LAX, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDY, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDA, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDX, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::LAX, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::TAY, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::LDA, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::TAX, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::LAX, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDY, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::LDA, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::LDX, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::LAX, ABS, 4, 0, 2),

    // 0xB0
    OpcodeInfo::new(OpMnemonic::BCS, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::LDA, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::LAX, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::LDY, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDA, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::LDX, ZPG_Y, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::LAX, ZPG_Y, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::CLV, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::LDA, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::TSX, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::LAS, ABS_Y, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::LDY, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::LDA, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::LDX, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::LAX, ABS_Y, 4, 1, 2),

    // 0xC0
    OpcodeInfo::new(OpMnemonic::CPY, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::CMP, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::DCP, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::CPY, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::CMP, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::DEC, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::DCP, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::INY, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::CMP, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::DEX, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::AXS, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::CPY, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::CMP, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::DEC, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::DCP, ABS, 6, 0, 3),

    // 0xD0
    OpcodeInfo::new(OpMnemonic::BNE, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::CMP, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::DCP, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::CMP, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::DEC, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::DCP, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::CLD, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::CMP, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::DCP, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::CMP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::DEC, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::DCP, ABS_X, 7, 0, 3),

    // 0xE0
    OpcodeInfo::new(OpMnemonic::CPX, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::SBC, IND_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, IMT, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::ISC, IND_X, 8, 0, 2),
    OpcodeInfo::new(OpMnemonic::CPX, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::SBC, ZPG, 3, 0, 2),
    OpcodeInfo::new(OpMnemonic::INC, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::ISC, ZPG, 5, 0, 2),
    OpcodeInfo::new(OpMnemonic::INX, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::SBC, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::SBC, IMT, 2, 0, 2),
    OpcodeInfo::new(OpMnemonic::CPX, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::SBC, ABS, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::INC, ABS, 6, 0, 3),
    OpcodeInfo::new(OpMnemonic::ISC, ABS, 6, 0, 3),

    // 0xF0
    OpcodeInfo::new(OpMnemonic::BEQ, REL, 2, 1, 2),
    OpcodeInfo::new(OpMnemonic::SBC, IND_Y, 5, 1, 2),
    OpcodeInfo::new(OpMnemonic::KIL, IMP, 0, 0, 1),
    OpcodeInfo::new(OpMnemonic::ISC, IND_Y, 8, 1, 2),
    OpcodeInfo::new(OpMnemonic::NOP, ZPG_X, 4, 0, 3),
    OpcodeInfo::new(OpMnemonic::SBC, ZPG_X, 4, 0, 2),
    OpcodeInfo::new(OpMnemonic::INC, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::ISC, ZPG_X, 6, 0, 2),
    OpcodeInfo::new(OpMnemonic::SED, IMP, 2, 0, 1),
    OpcodeInfo::new(OpMnemonic::SBC, ABS_Y, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, IMP, 2, 0, 3),
    OpcodeInfo::new(OpMnemonic::ISC, ABS_Y, 7, 1, 3),
    OpcodeInfo::new(OpMnemonic::NOP, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::SBC, ABS_X, 4, 1, 3),
    OpcodeInfo::new(OpMnemonic::INC, ABS_X, 7, 0, 3),
    OpcodeInfo::new(OpMnemonic::ISC, ABS_X, 7, 0, 3),
];

#[repr(u8)]
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum AddressMode {
    Accumulator,
    Implied,
    Immediate,
    Absolute,
    ZeroPage,
    Indirect,
    Relative,
    AbsoluteX,
    AbsoluteY,
    ZeroPageX,
    ZeroPageY,
    IndexedIndirect,
    IndirectIndexed,
}

pub const ACC: AddressMode = AddressMode::Accumulator;
pub const IMP: AddressMode = AddressMode::Implied;
pub const IMT: AddressMode = AddressMode::Immediate;
pub const ABS: AddressMode = AddressMode::Absolute;
pub const ZPG: AddressMode = AddressMode::ZeroPage;
pub const IND: AddressMode = AddressMode::Indirect;
pub const REL: AddressMode = AddressMode::Relative;
pub const ABS_X: AddressMode = AddressMode::AbsoluteX;
pub const ABS_Y: AddressMode = AddressMode::AbsoluteY;
pub const ZPG_X: AddressMode = AddressMode::ZeroPageX;
pub const ZPG_Y: AddressMode = AddressMode::ZeroPageY;
pub const IND_X: AddressMode = AddressMode::IndexedIndirect;
pub const IND_Y: AddressMode = AddressMode::IndirectIndexed;

#[allow(non_camel_case_types)]
#[derive(Debug, Copy, Clone, Eq, PartialEq)]
#[repr(u8)]
pub enum OpCode {
    BRK = 0x00,
    ORA_IND_X = 0x01,
    KIL_1 = 0x02,
    SLO_IND_X = 0x03,
    NOP_ZPG_1 = 0x04,
    ORA_ZPG = 0x05,
    ASL_ZPG = 0x06,
    SLO_ZPG = 0x07,
    PHP = 0x08,
    ORA_IMT = 0x09,
    ASL_ACC = 0x0A,
    NOP_ABS_1 = 0x0C,
    ORA_ABS = 0x0D,
    ASL_ABS = 0x0E,
    SLO_ABS = 0x0F,

    BPL_REL = 0x10,
    ORA_IND_Y = 0x11,
    KIL_2 = 0x12,
    SLO_IND_Y = 0x13,
    NOP_ZPG_X_1 = 0x14,
    ORA_ZPG_X = 0x15,
    ASL_ZPG_X = 0x16,
    SLO_ZPG_X = 0x17,
    CLC = 0x18,
    ORA_ABS_Y = 0x19,
    NOP_1 = 0x1A,
    SLO_ABS_Y = 0x1B,
    NOP_ABS_X_1 = 0x1C,
    ORA_ABS_X = 0x1D,
    ASL_ABS_X = 0x1E,
    SLO_ABS_X = 0x1F,

    JSR_ABS = 0x20,
    AND_IND_X = 0x21,
    KIL_3 = 0x22,
    RLA_IND_X = 0x23,
    BIT_ZPG = 0x24,
    AND_ZPG = 0x25,
    ROL_ZPG = 0x26,
    RLA_ZPG = 0x27,
    PLP = 0x28,
    AND_IMT = 0x29,
    ROL_ACC = 0x2A,
    BIT_ABS = 0x2C,
    AND_ABS = 0x2D,
    ROL_ABS = 0x2E,
    RLA_ABS = 0x2F,

    BMI_REL = 0x30,
    AND_IND_Y = 0x31,
    KIL_4 = 0x32,
    RLA_IND_Y = 0x33,
    NOP_ZPG_X_2 = 0x34,
    AND_ZPG_X = 0x35,
    ROL_ZPG_X = 0x36,
    RLA_ZPG_X = 0x37,
    SEC = 0x38,
    AND_ABS_Y = 0x39,
    NOP_2 = 0x3A,
    RLA_ABS_Y = 0x3B,
    NOP_ABS_X_2 = 0x3C,
    AND_ABS_X = 0x3D,
    ROL_ABS_X = 0x3E,
    RLA_ABS_X = 0x3F,

    RTI = 0x40,
    EOR_IND_X = 0x41,
    KIL_5 = 0x42,
    SRE_IND_X = 0x43,
    NOP_ZPG_4 = 0x44,
    EOR_ZPG = 0x45,
    LSR_ZPG = 0x46,
    SRE_ZPG = 0x47,
    PHA = 0x48,
    EOR_IMT = 0x49,
    LSR_ACC = 0x4A,
    // ALR
    JMP_ABS = 0x4C,
    EOR_ABS = 0x4D,
    LSR_ABS = 0x4E,
    SRE_ABS = 0x4F,

    BVC_REL = 0x50,
    EOR_IND_Y = 0x51,
    KIL_6 = 0x52,
    SRE_IND_Y = 0x53,
    NOP_ZPG_X_3 = 0x54,
    EOR_ZPG_X = 0x55,
    LSR_ZPG_X = 0x56,
    SRE_ZPG_X = 0x57,
    CLI = 0x58,
    EOR_ABS_Y = 0x59,
    NOP_4 = 0x5A,
    SRE_ABS_Y = 0x5B,
    NOP_ABS_X_3 = 0x5C,
    EOR_ABS_X = 0x5D,
    LSR_ABS_X = 0x5E,
    SRE_ABS_X = 0x5F,

    RTS = 0x60,
    ADC_IND_X = 0x61,
    KIL_7 = 0x62,
    RRA_IND_X = 0x63,
    NOP_ZPG_3 = 0x64,
    ADC_ZPG = 0x65,
    ROR_ZPG = 0x66,
    RRA_ZPG = 0x67,
    PLA = 0x68,
    ADC_IMT = 0x69,
    ROR_ACC = 0x6A,
    JMP_IND = 0x6C,
    ADC_ABS = 0x6D,
    ROR_ABS = 0x6E,
    RRA_ABS = 0x6F,

    BVS_REL = 0x70,
    ADC_IND_Y = 0x71,
    KIL_8 = 0x72,
    RRA_IND_Y = 0x73,
    NOP_ZPG_X_4 = 0x74,
    ADC_ZPG_X = 0x75,
    ROR_ZPG_X = 0x76,
    RRA_ZPG_X = 0x77,
    SEI = 0x78,
    ADC_ABS_Y = 0x79,
    NOP_5 = 0x7A,
    RRA_ABS_Y = 0x7B,
    NOP_ABS_X_4 = 0x7C,
    ADC_ABS_X = 0x7D,
    ROR_ABS_X = 0x7E,
    RRA_ABS_X = 0x7F,

    NOP_IMM_1 = 0x80,
    STA_IND_X = 0x81,
    NOP_IMM_2 = 0x82,
    SAX_IND_X = 0x83,
    STY_ZPG = 0x84,
    STA_ZPG = 0x85,
    STX_ZPG = 0x86,
    SAX_ZPG = 0x87,
    DEY = 0x88,
    NOP_IMM_3 = 0x89,
    TXA = 0x8A,
    XAA_IMM = 0x8B,
    STY_ABS = 0x8C,
    STA_ABS = 0x8D,
    STX_ABS = 0x8E,
    SAX_ABS = 0x8F,

    BCC_REL = 0x90,
    STA_IND_Y = 0x91,
    KIL_10 = 0x92,
    AHX_IND_Y = 0x93,
    STY_ZPG_X = 0x94,
    STA_ZPG_X = 0x95,
    STX_ZPG_Y = 0x96,
    SAX_ZPG_Y = 0x97,
    TYA = 0x98,
    STA_ABS_Y = 0x99,
    TXS = 0x9A,
    TAS_ABS_Y = 0x9B,
    SHY_ABS_X = 0x9C,
    STA_ABS_X = 0x9D,
    SHX_ABS_Y = 0x9E,
    AHX_ABS_Y = 0x9F,

    LDY_IMT = 0xA0,
    LDA_IND_X = 0xA1,
    LDX_IMT = 0xA2,
    LAX_IND_X = 0xA3,
    LDY_ZPG = 0xA4,
    LDA_ZPG = 0xA5,
    LDX_ZPG = 0xA6,
    LAX_ZPG = 0xA7,
    TAY = 0xA8,
    LDA_IMT = 0xA9,
    TAX = 0xAA,
    LAX_IMM = 0xAB,
    LDY_ABS = 0xAC,
    LDA_ABS = 0xAD,
    LDX_ABS = 0xAE,
    LAX_ABS = 0xAF,

    BCS_REL = 0xB0,
    LDA_IND_Y = 0xB1,
    KIL_11 = 0xB2,
    LAX_IND_Y = 0xB3,
    LDY_ZPG_X = 0xB4,
    LDA_ZPG_X = 0xB5,
    LDX_ZPG_Y = 0xB6,
    LAX_ZPG_Y = 0xB7,
    CLV = 0xB8,
    LDA_ABS_Y = 0xB9,
    TSX = 0xBA,
    // BB
    LDY_ABS_X = 0xBC,
    LDA_ABS_X = 0xBD,
    LDX_ABS_Y = 0xBE,
    LAX_ABS_Y = 0xBF,

    CPY_IMT = 0xC0,
    CMP_IND_X = 0xC1,
    NOP_IMM_4 = 0xC2,
    DCP_IND_X = 0xC3,
    CPY_ZPG = 0xC4,
    CMP_ZPG = 0xC5,
    DEC_ZPG = 0xC6,
    DCP_ZPG = 0xC7,
    INY = 0xC8,
    CMP_IMT = 0xC9,
    DEX = 0xCA,
    // CB
    CPY_ABS = 0xCC,
    CMP_ABS = 0xCD,
    DEC_ABS = 0xCE,
    DCP_ABS = 0xCF,

    BNE_REL = 0xD0,
    CMP_IND_Y = 0xD1,
    KIL_12 = 0xD2,
    DCP_IND_Y = 0xD3,
    NOP_ZPG_X_5 = 0xD4,
    CMP_ZPG_X = 0xD5,
    DEC_ZPG_X = 0xD6,
    DCP_ZPG_X = 0xD7,
    CLD = 0xD8,
    CMP_ABS_Y = 0xD9,
    NOP_6 = 0xDA,
    DCP_ABS_Y = 0xDB,
    NOP_ABS_X_5 = 0xDC,
    CMP_ABS_X = 0xDD,
    DEC_ABS_X = 0xDE,
    DCP_ABS_X = 0xDF,

    CPX_IMT = 0xE0,
    SBC_IND_X = 0xE1,
    NOP_IMM_5 = 0xE2,
    ISC_IND_X = 0xE3,
    CPX_ZPG = 0xE4,
    SBC_ZPG = 0xE5,
    INC_ZPG = 0xE6,
    ISC_ZPG = 0xE7,
    INX = 0xE8,
    SBC_IMT = 0xE9,
    NOP = 0xEA,
    SBC_IMT_2 = 0xEB,
    CPX_ABS = 0xEC,
    SBC_ABS = 0xED,
    INC_ABS = 0xEE,
    ISC_ABS = 0xEF,

    BEQ_REL = 0xF0,
    SBC_IND_Y = 0xF1,
    KIL_13 = 0xF2,
    ISC_IND_Y = 0xF3,
    NOP_ZPG_X_6 = 0xF4,
    SBC_ZPG_X = 0xF5,
    INC_ZPG_X = 0xF6,
    ISC_ZPG_X = 0xF7,
    SED = 0xF8,
    SBC_ABS_Y = 0xF9,
    NOP_7 = 0xFA,
    ISC_ABS_Y = 0xFB,
    NOP_ABS_X_6 = 0xFC,
    SBC_ABS_X = 0xFD,
    INC_ABS_X = 0xFE,
    ISC_ABS_X = 0xFF,
}